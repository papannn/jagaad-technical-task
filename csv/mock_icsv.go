// Code generated by mockery v2.30.1. DO NOT EDIT.

package csv

import (
	dto "jagaat-technical-task/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockICSV is an autogenerated mock type for the ICSV type
type MockICSV struct {
	mock.Mock
}

// Read provides a mock function with given fields:
func (_m *MockICSV) Read() ([][]string, error) {
	ret := _m.Called()

	var r0 [][]string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([][]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Write provides a mock function with given fields: _a0
func (_m *MockICSV) Write(_a0 []dto.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]dto.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockICSV creates a new instance of MockICSV. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockICSV(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockICSV {
	mock := &MockICSV{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
